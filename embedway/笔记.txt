=================2018.6.23笔记

1、通过vpn获取公司资源方法
   -登陆EasyConn，输入用户名密码
   -在本地文件夹地址路径输入ftp://10.0.1.10 进入ftp服务器

2、在编译github下载下来的onie源码时，出现很多关联工具没有下载，此时要注意编译过程中出现的error,以及提示缺失的相关工具。

3、需要的部分关联软件：
	#stgit
	#bison
	#flex
	#texinfo
	#help2man

4、中途出现gcc-6.3.0.tar.bz2校验失败，处理方法在build/download中删除该压缩包，然后冲重新	make,让其在外网中重新下载该压缩包。

5、安装过程中提示： fatal error : popt.h :没有哪个文件或目录  
	解决方法：安装对应的包  sudo apt-get install libpopt-dev
    	-fatal error: prerror.h : 没有那个文件或目录
    	-fatal error: cert.h :没有哪个文件或目录

6、可以在下列网站下查看完整包名：
	https://packages.ubuntu.com/search?suite=default&section=all&arch=any&keywords=nss&searchon=names


7、缺失相应的包 
	No package 'efivar' found
	解决方法： sudo apt-get install efivar  ; sudo apt-get install libefivar-dev

	No package 'nss' found
	解决方法： sudo apt-get install libnss3  ; sudo apt-get install libnss3-dev
		   sudo apt-get install libnss3-tools

	No package 'nspr' found

	No package 'efivar' found

8、问题：dpkg:处理软件包 dnsproxy 时出错
	解决方法：

	-备份dpkg下的info,然后自己创建一个新的info，然后更新，再把新的info里的内容拷贝到旧的里面，旧的再改成info,删除自己添加的
	-复制代码 
	-sudo mv /var/lib/dpkg/info/var/lib/dpkg/infoold:  sudo mkdir /var/lib/dpkg/info 
	-sudo apt-get -f install 
	-sudo mv /var/lib/dpkg/info/?/var/lib/dpkg/infoold:  sudo rm -rf /var/lib/dpkg/info 
	-sudo mv /var/lib/dpkg/info_old /var/lib/dpkg/info


============2018.6.24笔记
编译指令 ：  $ make -j4 MACHINE=kvm_x86_64 all recovery-iso
1、在编译过程中会提示输入你的邮箱以及用户名
	解决方法： git config --global user.email "you@example.com"
		   git config --global user.name "your name"

2、问题 autoreconf:未找到命令
   	解决方法：sudo apt-get install autoconf

3、configure: error: missing required tool: gperf
	解决方法：sudo apt install gperf

4、configure: error: Required tool not found: GNU awk
	解决方法：sudo apt-get install gawk 

5、configure: error: could not find curses header, required for the kconfig frontends
	解决方法：sudo apt-get install libncurses5-dev

6、（重点，昨天卡在这里了）Alternatively, you may set the environment variables OPENSSL_CFLAGS
and OPENSSL_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.
make/mokutil.make:60: recipe for target '/home/jinhui/github/onie/build/user/x86_64-g6.3.0-lnx4.9.95-uClibc-ng-1.0.22/stamp/mokutil-patch' failed
	解决方法：
		$sudo apt-get install openssl
		$sudo apt-get install libssl-dev
		$sudo apt-get install libsigc++-2.0-dev
		$sudo apt-get install libsigc++-2.0-dev
 	网上解决方法：
	{
		1、$sudo ./configure
		将会开始检查环境、配置，应该会返回信息：
		　 checking for OPENSSL... configure: error: Package requirements (openssl) were not met:
		　　Consider adjusting the PKG_CONFIG_PATH environment variable if you
		　　installed software in a non-standard prefix.
		　　Alternatively, you may set the environment variables OPENSSL_CFLAGS
		　　and OPENSSL_LIBS to avoid the need to call pkg-config.
		　　See the pkg-config man page for more details.
		2、通过Google搜索结果中，都说的是在这里需要告诉pkg-config这个openssl的相关配置文件(.pc)的位置，通常已安装的软件和包的.pc文件都会出现在/usr/lib/pkg-config下，但我在这里没有找到openssl的.pc文件，并且通过使用命令$sudo apt-get install openssl发现openssl是已安装了的，到这一步就停滞不前了。最后在Ubuntu的package网站里搜索到一个相关的包是libssl- dev，安装这个包：
		　　$sudo apt-get install libssl-dev
		　　安装完libssl-dev之后再接着重复上一步$sudo ./configure又会收到和之前类似的信息，只是这回返回的是：
		　　checking for STUFF... configure: error: Package requirements (sigc++-2.0) were not met:
		　　No package 'sigc++-2.0' found
		　　再次通过Ubuntu的Package网站里搜索到相关软件包是libsigc++-2.0，所以需要安装这个包：
		3、$sudo apt-get install libsigc++-2.0-dev

		如果还是不行的话安装这个包libcurl4-openssl-dev

		4、$sudo apt-get install libsigc++-2.0-dev

		安装完这个包之后再重复执行$sudo /.configure，可以顺利完成了
	}	


7、No package 'uuid' found
	解决方法： -sudo apt install uuid
		  -sudo apt install uuid-dev
		  -sudo apt-get install uuidcdef
		  -sudo apt-get install uuid-runtime

8、==== Patching mokutil ====
重新初始化现存的 Git 仓库于 /home/jinhui/github/onie/build/user/x86_64-g6.3.0-lnx4.9.95-uClibc-ng-1.0.22/grub/grub-2.02/.git/
重新初始化现存的 Git 仓库于 /home/jinhui/github/onie/build/user/x86_64-g6.3.0-lnx4.9.95-uClibc-ng-1.0.22/mokutil/mokutil-0.3.0/.git/
	 -stg init: master: branch already initialized

	mokutil: tools for manipulating machine owner keys
	mokutil-dbgsym: debug symbols for mokutil
	网上解决方法{
			1.关闭BIOS里的Secure Boot
			2.重启ubuntu，安装mokutil
			代码:
			sudo apt install mokutil

			安装完成后，要求录入8位以上的密码。
			3.
			代码:
			sudo mokutil --disable-validation

			录入2步骤设置的密码。
			4.
			代码:
			sudo mokutil --sb-state

			代码:
			SecureBoot disabled

			5.virtualbox升级到5.0.20
			6.ubuntu内核升级到4.4.0-21-generic
			代码:
			sudo update

			代码:
			sudo upgrade

			7.
			代码:
			sudo /sbin/rcvboxdrv setup

			到bios里将Secure Boot再打开，打完收工。
		   }

:(卡在secure boot 这里了，网上说 {
					1：ubuntu没有secure boot 认证。死了这条心吧。
					2：关了secure boot 。安装ubuntu。
					3：如果要进win8,就打开secure boot。哎，很蛋疼，是吧。
					4：关了secure boot，重新安装win8 ，自己想办法激活（这个目前很简单了吧）。同时安装ubuntu，一切就正常了。
				}
明天再尝试解决一下吧。

总结：
	一般的在编译onie时以下这些软件是需要安装的：
	
	sudo apt-get -y install stgit
	sudo apt-get -y install bison
	sudo apt-get -y install flex
	sudo apt-get -y install texinfo
	sudo apt-get -y install help2man
	sudo apt-get -y install libpopt-dev
	sudo apt-get -y install efivar
	sudo apt-get -y install libefivar-dev
	sudo apt-get -y install libnss3
	sudo apt-get -y install libnss3-dev
	sudo apt-get -y install libnss3-tools
	sudo apt-get -y install autoconf
	sudo apt-get -y install gperf
	sudo apt-get -y install gawk 
	sudo apt-get -y install libncurses5-dev
	sudo apt-get -y install openssl
	sudo apt-get -y install libssl-dev
	sudo apt-get -y install libsigc++-2.0-dev
	sudo apt-get -y install uuid
	sudo apt-get -y install uuid-dev
	sudo apt-get -y install uuidcdef
	sudo apt-get -y install uuid-runtime

=================6月25日笔记
1、onie编译资源网站
http://www.onie.org
http://www.opencompute.org/wiki/Networking/ONIE#Documentation
http://opencomputeproject.github.io/onie/developers/index.html
http://docs.docker.com

2、腾老大说在ubuntu-16.04上编译onie遇到的坑会比较多，所以我决定装个ubuntu-14.04的版本再尝试一下

3、熟悉docker编译。以后尽量向该方向发展。

4、docker的安装 ：
	-安装Docker社区版仓库
      step1:
			sudo apt-get -y install apt-transport-https ca-certificates curl

      step2:
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

      step3:
			sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

      step4:
			sudo apt-get update


    -获取Docker社区版

	在Ubuntu上安装最新的Docker社区版

	sudo apt-get -y install docker-ce


    -测试你的Docker社区版是否安装成功
	sudo docker run hello-world

	一般来说在国内运行上述测试都是失败的，主要原因是在国内访问docker的网络不稳定。所以需要用到加速器

5、获取阿里云加速器：
	访问https://cr.console.aliyun.com/#/accelerator
	可以获得自己的加速器 https://××××××.mirror.aliyuncs.com
	我所获得的加速器地址为： https://pqvdqwpu.mirror.aliyuncs.com

	安装／升级你的Docker客户端

   	推荐安装1.10.0以上版本的Docker客户端，参考文档 docker-ce

	#如何配置镜像加速器

    	针对Docker客户端版本大于1.10.0的用户

   	您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：

	1、sudo mkdir -p /etc/docker
	2、sudo tee /etc/docker/daemon.json <<-'EOF'
	    {
	      "registry-mirrors": ["https://pqvdqwpu.mirror.aliyuncs.com"]
	    }
	    EOF
	3、sudo systemctl daemon-reload
	4、sudo systemctl restart docker


=======6月26日笔记

1、在（https://github.com/opencomputeproject/onie）源码下存在docker的对onie的编译环境。
	地址为：./onie/contrib/build-env/
	具体的使用方法在 /onie/contrib/build-env/README.md

2、了解SONiC(Software for Open Network in the Cloud)(针对云计算开放网络的操作系统)

3、在ubuntu下如果下载软件慢的话，可以通过替换 ubuntu 源来实现。
	参考如下地址：https://blog.csdn.net/qq_33472557/article/details/77389192

4、在onie官网上找到的docker的onie编译环境是基于debain的，但是在国内无法连接到debain的源，而且在ubuntu下也无法使用阿里云的debain源
	所以想到了如下方法：
		1、在ubuntu下通过docker下载一个基本的debain镜像，
		2、生成debain容器，将该容器的debain源改为国内的阿里云源，之后在该debain容器中编译docker镜像
		3、创建docker基本的debain容器参考：https://blog.csdn.net/lindev/article/details/50279769
 		4、docker中debian系统更换阿里云镜像源参考：https://blog.csdn.net/seymourde/article/details/78123985
		5、


========6月27日笔记
1、在主机和容器中拷贝文件的指令：
从主机复制到容器sudo docker cp host_path containerID:container_path
从容器复制到主机sudo docker cp containerID:container_path host_path
容器ID的查询方法想必大家都清楚:docker ps -a（root@8e195035a62e:/# 就是root后面这一串）
docker ps	显示当前正在运行的容器。
docker ps -a 	显示所有运行过和正在运行的容器。
注意：容器要处于运行状态。

2、阿里云docker镜像的下载及使用
 有些类似与git的使用方法，sudo docker pull "URL"(仓库地址)
eg:sudo docker pull registry.cn-hangzhou.aliyuncs.com/lhn/debain  (从阿里云镜像库中获取debain的镜像包)


3、花了四天的时间，总算是能够在docker容器中编译onie了 (：D) ，给自己点个赞！哈哈
	总结：	1、一般的如果要编译什么镜像，可以先寻找是否有官方的docker容器来直接编译，如果有的话就很方便了（很多时间都花在如何搭建编译环境上了T^T）
		2、在国内，ubuntu的源最好是换成国内的源，比如阿里云的源。
		3、在国内，docker的下载是需要镜像加速的，可以参考上面如何获取阿里云镜像。（在国能各种墙，真的很蛋疼阿）
		4、编译完的镜像要记得拷贝出来哦。


=======6月28日笔记
1、docker 常用的一些命令
	-rm        Remove one or more containers 
              --删除容器，注意，不可以删除一个运行中的容器，必须先用docker stop或docker kill使其停止。
              当然可以强制删除，必须加-f参数
              如果要一次性删除所有容器，可使用 docker rm -f `docker ps -a -q`，其中，-q指的是只列出容器的ID
    	-rmi       Remove one or more images  --删除镜像
    	-run       Run a command in a new container   
              --让创建的容器立刻进入运行状态，该命令等同于docker create创建容器后再使用docker start启动容器
    	-save      Save an image(s) to a tar archive
              --将镜像打包，与上面的load命令相对应
              譬如： docker save -o nginx.tar nginx
    	-search    Search the Docker Hub for images  --从Docker Hub中搜索镜像
    	-start     Start one or more stopped containers --启动容器
    	-stats     Display a live stream of container(s) resource usage statistics
              	--动态显示容器的资源消耗情况，包括：CPU、内存、网络I/O
		-attach  --进入容器
    	-stop      Stop a running container 
              --停止一个运行的容器
    	-tag       Tag an image into a repository
              --对镜像进行重命名
    	-top       Display the running processes of a container
              --查看容器中正在运行的进程
    	-unpause   Unpause all processes within a container
              --恢复容器内暂停的进程，与pause参数相对应
    	-version   Show the Docker version information 
              --查看docker的版本
    	-wait      Block until a container stops, then print its exit code
              --捕捉容器停止时的退出码，执行此命令后，该命令会“hang”在当前终端，直到容器停止，此时，会打印出容器的退出码。

2、通过onie的官方代码生成docker镜像
	onie官方代码docker的编译环境在目录/onie/contrib/build-env 下
	cd进入该目录：
		1、user@host:~/src/onie/contrib/build-env$ docker build -t debian:build-env .
			--通过dockerfile生成docker镜像
		2、进入docker容器后执行build@f1063a996da6:~$ ./clone-onie   --从官方路径下载onie源码
			--当然也可以通过docker cp 来把宿主机的源码拷贝到容器中
		3、cd进入/onie/build-config路径
		4、进行编译测试：
			-* For a KVM build: `make -j4 MACHINE=kvm_x86_64 all`

			-For an Accton platform: `make -j4 MACHINEROOT=../machine/accton MACHINE=ac    cton_as7816_64x all`

7月2日笔记===============================

1、对于最新的onie代码，embedway平台的配置需要进行一些调整。
	-busy box 中的patch可以删除，通过config文件里的配置来进行修改。
		将原本patch的部分：
				@@ -33,7 +33,7 @@ static int i2c_write_1b(struct eeprom *e, __u8 buf)
				r = i2c_smbus_write_byte(e->fd, buf);
				if(r < 0)
					fprintf(stderr, "Error i2c_write_1b: %s\n", strerror(errno));
			-	usleep(10);
			+	usleep(10000);
				return r;
		替换为config中的：
			CONFIG_SYS_EEPROM_I2C_WRITE_1B_DELAY=10000
			CONFIG_SYS_EEPROM_I2C_WRITE_2B_DELAY=10000
			CONFIG_SYS_EEPROM_I2C_WRITE_3B_DELAY=10000
			
2、machine.make中也要做一定的修改，原本采用默认版本，但是低版本的gcc编译时会有不兼容的问题
所以将原本配置改为如下配置：
	# Set the desired kernel version.
	LINUX_VERSION		= 4.9
	LINUX_MINOR_VERSION	= 95

	# Use gcc-6.3.0
	GCC_VERSION = 6.3.0

7月3日笔记=================
	shell学习内容参考：http://www.runoob.com/linux/linux-shell.html
	重点：
		1、shell脚本开头一般的以 #！/bin/bash 开头
		2、shell变量名和等号之间不能有空格
				-命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
				-中间不能有空格，可以使用下划线（_）。
				-不能使用标点符号。
				-不能使用bash里的关键字（可用help命令查看保留关键字）。
		3、除了显式地直接赋值，还可以用语句给变量赋值，如：
				for file in `ls /etc`  等价于 file="ls/etc"
				或
				for file in $(ls /etc) 等价于 file="ls/etc"
		4、使用一个定义过的变量，只要在变量名前面加美元符号即可，如：
				your_name="qinjx"
				echo $your_name
				echo ${your_name}  一般加上括号
		5、只读变量
				使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。
				下面的例子尝试更改只读变量，结果报错：
					#!/bin/bash
					myUrl="http://www.w3cschool.cc"
					readonly myUrl
					myUrl="http://www.runoob.com"
		6、删除变量
				使用 unset 命令可以删除变量。语法：
					unset variable_name
		7、提取子字符串
				以下实例从字符串第 2 个字符开始截取 4 个字符：
					string="runoob is a great site"
					echo ${string:1:4} # 输出 unoo
		8、查找子字符串
				查找字符 "i 或 s" 的位置：
					string="runoob is a great company"
					echo `expr index "$string" is`  # 输出 8
					注意： 以上脚本中 "`" 是反引号，而不是单引号 "'"，不要看错了哦。
		9、定义数组
				在Shell中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
				数组名=(值1 值2 ... 值n)
				eg: array_name=(value0 value1 value2 value3)
		10、读取数组
				读取数组元素值的一般格式是：
				${数组名[下标]}
				eg: valuen=${array_name[n]}
			*使用 @ 符号可以获取数组中的所有元素,
				eg: echo ${array_name[@]}
		11、获取数组的长度
				获取数组长度的方法与获取字符串长度的方法相同，例如：
				# 取得数组元素的个数
					length=${#array_name[@]}
				# 或者
					length=${#array_name[*]}
				# 取得数组单个元素的长度
					lengthn=${#array_name[n]}
		12、乘号(*)前边必须加反斜杠(\)才能实现乘法运算；
				val=`expr $a \* $b`
				echo "a * b : $val"
		
		13、关系运算符
			关系运算符只支持数字，不支持字符串，除非字符串的值是数字。
			下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：
			运算符	说明	举例
			
			-eq		检测两个数是否相等，相等返回 true。						[ $a -eq $b ] 返回 false。
			-ne		检测两个数是否不相等，不相等返回 true。					[ $a -ne $b ] 返回 true。
			-gt		检测左边的数是否大于右边的，如果是，则返回 true。		[ $a -gt $b ] 返回 false。
			-lt		检测左边的数是否小于右边的，如果是，则返回 true。		[ $a -lt $b ] 返回 true。
			-ge		检测左边的数是否大于等于右边的，如果是，则返回 true。	[ $a -ge $b ] 返回 false。
			-le		检测左边的数是否小于等于右边的，如果是，则返回 true。	[ $a -le $b ] 返回 true。
				
				
				
				
				